package org.fisco.bcos.sdk.demo.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class KVTest extends Contract {
    public static final String[] BINARY_ARRAY = {
        "60806040523480156200001157600080fd5b506110096000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518060400160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401620000e591906200024a565b602060405180830381600087803b1580156200010057600080fd5b505af115801562000115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013b919062000159565b506200031f565b600081519050620001538162000305565b92915050565b6000602082840312156200016c57600080fd5b60006200017c8482850162000142565b91505092915050565b6000620001928262000298565b6200019e8185620002a3565b9350620001b0818560208601620002be565b620001bb81620002f4565b840191505092915050565b6000620001d5600483620002a3565b91507f6e616d65000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600062000217600783620002a3565b91507f6167652c74656c000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000606082019050818103600083015262000266818462000185565b905081810360208301526200027b81620001c6565b90508181036040830152620002908162000208565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b83811015620002de578082015181840152602081019050620002c1565b83811115620002ee576000848401525b50505050565b6000601f19601f8301169050919050565b6200031081620002b4565b81146200031c57600080fd5b50565b610c5d806200032f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063693ec85e1461003b578063da465d741461006d575b600080fd5b6100556004803603810190610050919061076f565b61009d565b60405161006493929190610a11565b60405180910390f35b610087600480360381019061008291906107b0565b610238565b60405161009491906109bf565b60405180910390f35b606080606060008090506100af6104b3565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e10510b6040518060400160405280600681526020017f706572736f6e0000000000000000000000000000000000000000000000000000815250886040518363ffffffff1660e01b81526004016101409291906109da565b60006040518083038186803b15801561015857600080fd5b505afa15801561016c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061019591906106f2565b809250819350505060608083156101f65782600001516000815181106101b757fe5b602002602001015160200151915082600001516001815181106101d657fe5b602002602001015160200151905087828296509650965050505050610231565b604051806020016040528060008152506040518060200160405280600081525060405180602001604052806000815250965096509650505050505b9193909250565b60006102426104c6565b60405180604001604052806040518060400160405280600381526020017f616765000000000000000000000000000000000000000000000000000000000081525081526020018581525090506102966104c6565b60405180604001604052806040518060400160405280600381526020017f74656c000000000000000000000000000000000000000000000000000000000081525081526020018581525090506060600267ffffffffffffffff811180156102fc57600080fd5b5060405190808252806020026020018201604052801561033657816020015b6103236104c6565b81526020019060019003908161031b5790505b509050828160008151811061034757fe5b6020026020010181905250818160018151811061036057fe5b60200260200101819052506103736104b3565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663649a84286040518060400160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152508b856040518463ffffffff1660e01b815260040161041993929190610a5d565b602060405180830381600087803b15801561043357600080fd5b505af1158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b9190610746565b90507f0cf385eb927670d0229706269f568122463b7535b52bd98e52d4787771855d0d8160405161049c91906109bf565b60405180910390a180955050505050509392505050565b6040518060200160405280606081525090565b604051806040016040528060608152602001606081525090565b600082601f8301126104f157600080fd5b81516105046104ff82610ad6565b610aa9565b9150818183526020840193506020810190508360005b8381101561054a57815186016105308882610676565b84526020840193506020830192505060018101905061051a565b5050505092915050565b60008151905061056381610bf9565b92915050565b60008151905061057881610c10565b92915050565b600082601f83011261058f57600080fd5b81356105a261059d82610afe565b610aa9565b915080825260208301602083018583830111156105be57600080fd5b6105c9838284610ba6565b50505092915050565b600082601f8301126105e357600080fd5b81516105f66105f182610afe565b610aa9565b9150808252602083016020830185838301111561061257600080fd5b61061d838284610bb5565b50505092915050565b60006020828403121561063857600080fd5b6106426020610aa9565b9050600082015167ffffffffffffffff81111561065e57600080fd5b61066a848285016104e0565b60008301525092915050565b60006040828403121561068857600080fd5b6106926040610aa9565b9050600082015167ffffffffffffffff8111156106ae57600080fd5b6106ba848285016105d2565b600083015250602082015167ffffffffffffffff8111156106da57600080fd5b6106e6848285016105d2565b60208301525092915050565b6000806040838503121561070557600080fd5b600061071385828601610554565b925050602083015167ffffffffffffffff81111561073057600080fd5b61073c85828601610626565b9150509250929050565b60006020828403121561075857600080fd5b600061076684828501610569565b91505092915050565b60006020828403121561078157600080fd5b600082013567ffffffffffffffff81111561079b57600080fd5b6107a78482850161057e565b91505092915050565b6000806000606084860312156107c557600080fd5b600084013567ffffffffffffffff8111156107df57600080fd5b6107eb8682870161057e565b935050602084013567ffffffffffffffff81111561080857600080fd5b6108148682870161057e565b925050604084013567ffffffffffffffff81111561083157600080fd5b61083d8682870161057e565b9150509250925092565b6000610853838361097b565b905092915050565b600061086682610b3a565b6108708185610b5d565b93508360208202850161088285610b2a565b8060005b858110156108be578484038952815161089f8582610847565b94506108aa83610b50565b925060208a01995050600181019050610886565b50829750879550505050505092915050565b6108d981610b9c565b82525050565b60006108ea82610b45565b6108f48185610b6e565b9350610904818560208601610bb5565b61090d81610be8565b840191505092915050565b600061092382610b45565b61092d8185610b7f565b935061093d818560208601610bb5565b61094681610be8565b840191505092915050565b6000602083016000830151848203600086015261096e828261085b565b9150508091505092915050565b6000604083016000830151848203600086015261099882826108df565b915050602083015184820360208601526109b282826108df565b9150508091505092915050565b60006020820190506109d460008301846108d0565b92915050565b600060408201905081810360008301526109f48185610918565b90508181036020830152610a088184610918565b90509392505050565b60006060820190508181036000830152610a2b8186610918565b90508181036020830152610a3f8185610918565b90508181036040830152610a538184610918565b9050949350505050565b60006060820190508181036000830152610a778186610918565b90508181036020830152610a8b8185610918565b90508181036040830152610a9f8184610951565b9050949350505050565b6000604051905081810181811067ffffffffffffffff82111715610acc57600080fd5b8060405250919050565b600067ffffffffffffffff821115610aed57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610b1557600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610bd3578082015181840152602081019050610bb8565b83811115610be2576000848401525b50505050565b6000601f19601f8301169050919050565b610c0281610b90565b8114610c0d57600080fd5b50565b610c1981610b9c565b8114610c2457600080fd5b5056fea2646970667358221220cd5b40605478d5075d05edc1f6b53166046b7ba8ba05dcb53e480c2c88b090cd64736f6c634300060a0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "60806040523480156200001157600080fd5b506110096000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518060400160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401620000e591906200024a565b602060405180830381600087803b1580156200010057600080fd5b505af115801562000115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013b919062000159565b506200031f565b600081519050620001538162000305565b92915050565b6000602082840312156200016c57600080fd5b60006200017c8482850162000142565b91505092915050565b6000620001928262000298565b6200019e8185620002a3565b9350620001b0818560208601620002be565b620001bb81620002f4565b840191505092915050565b6000620001d5600783620002a3565b91507f6167652c74656c000000000000000000000000000000000000000000000000006000830152602082019050919050565b600062000217600483620002a3565b91507f6e616d65000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000606082019050818103600083015262000266818462000185565b905081810360208301526200027b8162000208565b905081810360408301526200029081620001c6565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b83811015620002de578082015181840152602081019050620002c1565b83811115620002ee576000848401525b50505050565b6000601f19601f8301169050919050565b6200031081620002b4565b81146200031c57600080fd5b50565b610c5d806200032f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063095bf8fa1461003b5780637b1b8e031461006b575b600080fd5b610055600480360381019061005091906107b0565b61009d565b60405161006291906109bf565b60405180910390f35b6100856004803603810190610080919061076f565b610318565b60405161009493929190610a11565b60405180910390f35b60006100a76104b3565b60405180604001604052806040518060400160405280600381526020017f616765000000000000000000000000000000000000000000000000000000000081525081526020018581525090506100fb6104b3565b60405180604001604052806040518060400160405280600381526020017f74656c000000000000000000000000000000000000000000000000000000000081525081526020018581525090506060600267ffffffffffffffff8111801561016157600080fd5b5060405190808252806020026020018201604052801561019b57816020015b6101886104b3565b8152602001906001900390816101805790505b50905082816000815181106101ac57fe5b602002602001018190525081816001815181106101c557fe5b60200260200101819052506101d86104cd565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663af5081746040518060400160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152508b856040518463ffffffff1660e01b815260040161027e93929190610a5d565b602060405180830381600087803b15801561029857600080fd5b505af11580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190610746565b90507fc044934b9c0dc8f2e96c0797246bde787cfafd3e8474b4ac3271c1d3ac7b819a8160405161030191906109bf565b60405180910390a180955050505050509392505050565b6060806060600080905061032a6104cd565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcce55316040518060400160405280600681526020017f706572736f6e0000000000000000000000000000000000000000000000000000815250886040518363ffffffff1660e01b81526004016103bb9291906109da565b60006040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061041091906106f2565b8092508193505050606080831561047157826000015160008151811061043257fe5b6020026020010151602001519150826000015160018151811061045157fe5b6020026020010151602001519050878282965096509650505050506104ac565b604051806020016040528060008152506040518060200160405280600081525060405180602001604052806000815250965096509650505050505b9193909250565b604051806040016040528060608152602001606081525090565b6040518060200160405280606081525090565b600082601f8301126104f157600080fd5b81516105046104ff82610ad6565b610aa9565b9150818183526020840193506020810190508360005b8381101561054a57815186016105308882610676565b84526020840193506020830192505060018101905061051a565b5050505092915050565b60008151905061056381610bf9565b92915050565b60008151905061057881610c10565b92915050565b600082601f83011261058f57600080fd5b81356105a261059d82610afe565b610aa9565b915080825260208301602083018583830111156105be57600080fd5b6105c9838284610ba6565b50505092915050565b600082601f8301126105e357600080fd5b81516105f66105f182610afe565b610aa9565b9150808252602083016020830185838301111561061257600080fd5b61061d838284610bb5565b50505092915050565b60006020828403121561063857600080fd5b6106426020610aa9565b9050600082015167ffffffffffffffff81111561065e57600080fd5b61066a848285016104e0565b60008301525092915050565b60006040828403121561068857600080fd5b6106926040610aa9565b9050600082015167ffffffffffffffff8111156106ae57600080fd5b6106ba848285016105d2565b600083015250602082015167ffffffffffffffff8111156106da57600080fd5b6106e6848285016105d2565b60208301525092915050565b6000806040838503121561070557600080fd5b600061071385828601610554565b925050602083015167ffffffffffffffff81111561073057600080fd5b61073c85828601610626565b9150509250929050565b60006020828403121561075857600080fd5b600061076684828501610569565b91505092915050565b60006020828403121561078157600080fd5b600082013567ffffffffffffffff81111561079b57600080fd5b6107a78482850161057e565b91505092915050565b6000806000606084860312156107c557600080fd5b600084013567ffffffffffffffff8111156107df57600080fd5b6107eb8682870161057e565b935050602084013567ffffffffffffffff81111561080857600080fd5b6108148682870161057e565b925050604084013567ffffffffffffffff81111561083157600080fd5b61083d8682870161057e565b9150509250925092565b6000610853838361097b565b905092915050565b600061086682610b3a565b6108708185610b5d565b93508360208202850161088285610b2a565b8060005b858110156108be578484038952815161089f8582610847565b94506108aa83610b50565b925060208a01995050600181019050610886565b50829750879550505050505092915050565b6108d981610b9c565b82525050565b60006108ea82610b45565b6108f48185610b6e565b9350610904818560208601610bb5565b61090d81610be8565b840191505092915050565b600061092382610b45565b61092d8185610b7f565b935061093d818560208601610bb5565b61094681610be8565b840191505092915050565b6000602083016000830151848203600086015261096e828261085b565b9150508091505092915050565b6000604083016000830151848203600086015261099882826108df565b915050602083015184820360208601526109b282826108df565b9150508091505092915050565b60006020820190506109d460008301846108d0565b92915050565b600060408201905081810360008301526109f48185610918565b90508181036020830152610a088184610918565b90509392505050565b60006060820190508181036000830152610a2b8186610918565b90508181036020830152610a3f8185610918565b90508181036040830152610a538184610918565b9050949350505050565b60006060820190508181036000830152610a778186610918565b90508181036020830152610a8b8185610918565b90508181036040830152610a9f8184610951565b9050949350505050565b6000604051905081810181811067ffffffffffffffff82111715610acc57600080fd5b8060405250919050565b600067ffffffffffffffff821115610aed57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610b1557600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610bd3578082015181840152602081019050610bb8565b83811115610be2576000848401525b50505050565b6000601f19601f8301169050919050565b610c0281610b90565b8114610c0d57600080fd5b50565b610c1981610b9c565b8114610c2457600080fd5b5056fea26469706673582212208c7dee0fbb3d0132d2eb06189bfd973ee71388c8c5b59c6004f4381cf41126d064736f6c634300060a0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"SetEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"age\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tel\",\"type\":\"string\"}],\"name\":\"set\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GET = "get";

    public static final String FUNC_SET = "set";

    public static final Event SETEVENT_EVENT =
            new Event("SetEvent", Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));;

    protected KVTest(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<SetEventEventResponse> getSetEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(SETEVENT_EVENT, transactionReceipt);
        ArrayList<SetEventEventResponse> responses =
                new ArrayList<SetEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetEventEventResponse typedResponse = new SetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Tuple3<String, String, String> get(String name) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET,
                        Arrays.<Type>asList(new Utf8String(name)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public TransactionReceipt set(String name, String age, String tel) {
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(
                                new Utf8String(name), new Utf8String(age), new Utf8String(tel)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void set(String name, String age, String tel, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(
                                new Utf8String(name), new Utf8String(age), new Utf8String(tel)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSet(String name, String age, String tel) {
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(
                                new Utf8String(name), new Utf8String(age), new Utf8String(tel)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getSetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<BigInteger> getSetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public static KVTest load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new KVTest(contractAddress, client, credential);
    }

    public static KVTest deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(
                KVTest.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                null,
                null,
                null);
    }

    public static class SetEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
