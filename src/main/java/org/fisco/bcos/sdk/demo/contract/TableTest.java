package org.fisco.bcos.sdk.demo.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.codec.datatypes.Event;
import org.fisco.bcos.sdk.codec.datatypes.Function;
import org.fisco.bcos.sdk.codec.datatypes.Type;
import org.fisco.bcos.sdk.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TableTest extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "513d601f19601f82011682018060405250610d199190810190611836565b90507fc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce81604051610d4a9190611c12565b60405180910390a18093505050509392505050565b6060806060600080600060608060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e1c9190611c2d565b602060405180830381600087803b158015610e3657600080fd5b505af1158015610e4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e6e919081019061180d565b97508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ed457600080fd5b505af1158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f0c9190810190611792565b96508673ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f639190611c6f565b600060405180830381600087803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff16634f49f01c886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fea9190611bb3565b602060405180830381600087803b15801561100457600080fd5b505af1158015611018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061103c91908101906117bb565b95508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110a257600080fd5b505af11580156110b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110da9190810190611836565b60405190808252806020026020018201604052801561110d57816020015b60608152602001906001900390816110f85790505b5094508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561117457600080fd5b505af1158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111ac9190810190611836565b6040519080825280602002602001820160405280156111da5781602001602082028038833980820191505090505b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561124157600080fd5b505af1158015611255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112799190810190611836565b6040519080825280602002602001820160405280156112ac57816020015b60608152602001906001900390816112975790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561131857600080fd5b505af115801561132c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113509190810190611836565b821215611656578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113ac9190611c12565b602060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113fe91908101906117e4565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161145390611c4f565b600060405180830381600087803b15801561146d57600080fd5b505af1158015611481573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506114aa91908101906118a0565b85838151811015156114b857fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161151890611cf9565b602060405180830381600087803b15801561153257600080fd5b505af1158015611546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061156a9190810190611836565b848381518110151561157857fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115d990611ca4565b600060405180830381600087803b1580156115f357600080fd5b505af1158015611607573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061163091908101906118a0565b838381518110151561163e57fe5b906020019060200201819052508160010191506112b4565b8484849a509a509a5050505050505050509193909250565b600061167a8251611e2a565b905092915050565b600061168e8251611e3c565b905092915050565b60006116a28251611e4e565b905092915050565b60006116b68251611e60565b905092915050565b60006116ca8235611e72565b905092915050565b60006116de8251611e72565b905092915050565b600082601f83011215156116f957600080fd5b813561170c61170782611d74565b611d47565b9150808252602083016020830185838301111561172857600080fd5b611733838284611ea0565b50505092915050565b600082601f830112151561174f57600080fd5b815161176261175d82611d74565b611d47565b9150808252602083016020830185838301111561177e57600080fd5b611789838284611eaf565b50505092915050565b6000602082840312156117a457600080fd5b60006117b28482850161166e565b91505092915050565b6000602082840312156117cd57600080fd5b60006117db84828501611682565b91505092915050565b6000602082840312156117f657600080fd5b600061180484828501611696565b91505092915050565b60006020828403121561181f57600080fd5b600061182d848285016116aa565b91505092915050565b60006020828403121561184857600080fd5b6000611856848285016116d2565b91505092915050565b60006020828403121561187157600080fd5b600082013567ffffffffffffffff81111561188b57600080fd5b611897848285016116e6565b91505092915050565b6000602082840312156118b257600080fd5b600082015167ffffffffffffffff8111156118cc57600080fd5b6118d88482850161173c565b91505092915050565b6000806000606084860312156118f657600080fd5b600084013567ffffffffffffffff81111561191057600080fd5b61191c868287016116e6565b935050602061192d868287016116be565b925050604084013567ffffffffffffffff81111561194a57600080fd5b611956868287016116e6565b9150509250925092565b600061196b82611dba565b80845260208401935061197d83611da0565b60005b828110156119af57611993868351611a47565b61199c82611de6565b9150602086019550600181019050611980565b50849250505092915050565b60006119c682611dc5565b808452602084019350836020820285016119df85611dad565b60005b84811015611a185783830388526119fa838351611a8c565b9250611a0582611df3565b91506020880197506001810190506119e2565b508196508694505050505092915050565b611a3281611e7c565b82525050565b611a4181611e8e565b82525050565b611a5081611e20565b82525050565b6000611a6182611ddb565b808452611a75816020860160208601611eaf565b611a7e81611ee2565b602085010191505092915050565b6000611a9782611dd0565b808452611aab816020860160208601611eaf565b611ab481611ee2565b602085010191505092915050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f6974656d5f6e616d6500000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f6974656d5f6964000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611b8181866119bb565b90508181036020830152611b958185611960565b90508181036040830152611ba981846119bb565b9050949350505050565b6000602082019050611bc86000830184611a29565b92915050565b6000602082019050611be36000830184611a38565b92915050565b6000604082019050611bfe6000830185611a38565b611c0b6020830184611a29565b9392505050565b6000602082019050611c276000830184611a47565b92915050565b60006020820190508181036000830152611c478184611a8c565b905092915050565b60006020820190508181036000830152611c6881611ac2565b9050919050565b60006040820190508181036000830152611c8881611ac2565b90508181036020830152611c9c8184611a56565b905092915050565b60006020820190508181036000830152611cbd81611af9565b9050919050565b60006040820190508181036000830152611cdd81611af9565b90508181036020830152611cf18184611a56565b905092915050565b6000",
        "6020820190508181036000830152611d1281611b30565b9050919050565b60006040820190508181036000830152611d3281611b30565b9050611d416020830184611a47565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611d6a57600080fd5b8060405250919050565b600067ffffffffffffffff821115611d8b57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611e3582611e00565b9050919050565b6000611e4782611e00565b9050919050565b6000611e5982611e00565b9050919050565b6000611e6b82611e00565b9050919050565b6000819050919050565b6000611e8782611e00565b9050919050565b6000611e9982611e00565b9050919050565b82818337600083830152505050565b60005b83811015611ecd578082015181840152602081019050611eb2565b83811115611edc576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820d0aeddef813ca702a985eddaec7846a4507ac1466148f714adffadad75fa8b1d6c6578706572696d656e74616cf50037"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "000000000000000000000000000000028152600401610d1990611cf2565b600060405180830381600087803b158015610d3357600080fd5b505af1158015610d47573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610d7091908101906118a0565b8583815181101515610d7e57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610dde90611c4f565b602060405180830381600087803b158015610df857600080fd5b505af1158015610e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e309190810190611836565b8483815181101515610e3e57fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e9f90611c9d565b600060405180830381600087803b158015610eb957600080fd5b505af1158015610ecd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610ef691908101906118a0565b8383815181101515610f0457fe5b90602001906020020181905250816001019150610b7a565b8484849a509a509a5050505050505050509193909250565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fe59190611c2d565b602060405180830381600087803b158015610fff57600080fd5b505af1158015611013573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611037919081019061180d565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561109d57600080fd5b505af11580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110d59190810190611792565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161112c9190611d12565b600060405180830381600087803b15801561114657600080fd5b505af115801561115a573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166315e51df6836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111b39190611bb3565b602060405180830381600087803b1580156111cd57600080fd5b505af11580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112059190810190611836565b90507fe7769b56c2afa8e40381956f76b91d9ec19c34c0a81791702fdcae68e35a7271816040516112369190611c12565b60405180910390a1809350505050919050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112fa9190611c2d565b602060405180830381600087803b15801561131457600080fd5b505af1158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061134c919081019061180d565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113b257600080fd5b505af11580156113c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113ea91908101906117e4565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114419190611d12565b600060405180830381600087803b15801561145b57600080fd5b505af115801561146f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def42698876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114c89190611c6f565b600060405180830381600087803b1580156114e257600080fd5b505af11580156114f6573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161154f9190611cbd565b600060405180830381600087803b15801561156957600080fd5b505af115801561157d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663a0bf1a09836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115d69190611bce565b602060405180830381600087803b1580156115f057600080fd5b505af1158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116289190810190611836565b90507fdfc533ec2b52797a1229dc2495dbd3f4948f7c4c982ec077ad9d80810ec5c1f9816040516116599190611c12565b60405180910390a18093505050509392505050565b600061167a8251611e2a565b905092915050565b600061168e8251611e3c565b905092915050565b60006116a28251611e4e565b905092915050565b60006116b68251611e60565b905092915050565b60006116ca8235611e72565b905092915050565b60006116de8251611e72565b905092915050565b600082601f83011215156116f957600080fd5b813561170c61170782611d74565b611d47565b9150808252602083016020830185838301111561172857600080fd5b611733838284611ea0565b50505092915050565b600082601f830112151561174f57600080fd5b815161176261175d82611d74565b611d47565b9150808252602083016020830185838301111561177e57600080fd5b611789838284611eaf565b50505092915050565b6000602082840312156117a457600080fd5b60006117b28482850161166e565b91505092915050565b6000602082840312156117cd57600080fd5b60006117db84828501611682565b91505092915050565b6000602082840312156117f657600080fd5b600061180484828501611696565b91505092915050565b60006020828403121561181f57600080fd5b600061182d848285016116aa565b91505092915050565b60006020828403121561184857600080fd5b6000611856848285016116d2565b91505092915050565b60006020828403121561187157600080fd5b600082013567ffffffffffffffff81111561188b57600080fd5b611897848285016116e6565b91505092915050565b6000602082840312156118b257600080fd5b600082015167ffffffffffffffff8111156118cc57600080fd5b6118d88482850161173c565b91505092915050565b6000806000606084860312156118f657600080fd5b600084013567ffffffffffffffff81111561191057600080fd5b61191c868287016116e6565b935050602061192d868287016116be565b925050604084013567ffffffffffffffff81111561194a57600080fd5b611956868287016116e6565b9150509250925092565b600061196b82611dba565b80845260208401935061197d83611da0565b60005b828110156119af57611993868351611a47565b61199c82611de6565b9150602086019550600181019050611980565b50849250505092915050565b60006119c682611dc5565b808452602084019350836020820285016119df85611dad565b60005b84811015611a185783830388526119fa838351611a8c565b9250611a0582611df3565b91506020880197506001810190506119e2565b508196508694505050505092915050565b611a3281611e7c565b82525050565b611a4181611e8e565b82525050565b611a5081611e20565b82525050565b6000611a6182611ddb565b808452611a75816020860160208601611eaf565b611a7e81611ee2565b602085010191505092915050565b6000611a9782611dd0565b808452611aab816020860160208601611eaf565b611ab481611ee2565b602085010191505092915050565b6000600782527f6974656d5f6964000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f6974656d5f6e616d6500000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611b8181866119bb565b90508181036020830152611b958185611960565b90508181036040830152611ba981846119bb565b9050949350505050565b6000602082019050611bc86000830184611a29565b92915050565b6000602082019050611be36000830184611a38565b92915050565b6000604082019050611bfe6000830185611a38565b611c0b6020830184611a29565b9392505050565b6000602082019050611c276000830184611a47565b92915050565b60006020820190508181036000830152611c478184611a8c565b905092915050565b60006020820190508181036000830152611c6881611ac2565b9050919050565b60006040820190508181036000830152611c8881611ac2565b9050611c976020830184611a47565b92915050565b60006020820190508181036000830152611cb681611af9565b9050919050565b60006040820190508181036000830152611cd681611af9565b90508181036020830152611cea8184611a56565b905092915050565b600060208201905081",
        "81036000830152611d0b81611b30565b9050919050565b60006040820190508181036000830152611d2b81611b30565b90508181036020830152611d3f8184611a56565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611d6a57600080fd5b8060405250919050565b600067ffffffffffffffff821115611d8b57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611e3582611e00565b9050919050565b6000611e4782611e00565b9050919050565b6000611e5982611e00565b9050919050565b6000611e6b82611e00565b9050919050565b6000819050919050565b6000611e8782611e00565b9050919050565b6000611e9982611e00565b9050919050565b82818337600083830152505050565b60005b83811015611ecd578082015181840152602081019050611eb2565b83811115611edc576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058207e0c19f15d68fdf2ec14aea4fceb5f204b0e52349796371b1369cb91aeea55246c6578706572696d656e74616cf50037"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"item_id\",\"type\":\"int256\"},{\"name\":\"item_name\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"item_id\",\"type\":\"int256\"},{\"name\":\"item_name\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_SELECT = "select";

    public static final Event CREATERESULT_EVENT =
            new Event(
                    "CreateResult",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));;

    public static final Event INSERTRESULT_EVENT =
            new Event(
                    "InsertResult",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));;

    public static final Event UPDATERESULT_EVENT =
            new Event(
                    "UpdateResult",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));;

    public static final Event REMOVERESULT_EVENT =
            new Event(
                    "RemoveResult",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));;

    protected TableTest(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public TransactionReceipt update(String name, BigInteger item_id, String item_name) {
        final Function function =
                new Function(
                        FUNC_UPDATE,
                        Arrays.<Type>asList(
                                new Utf8String(name),
                                new Int256(item_id),
                                new Utf8String(item_name)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update(
            String name, BigInteger item_id, String item_name, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_UPDATE,
                        Arrays.<Type>asList(
                                new Utf8String(name),
                                new Int256(item_id),
                                new Utf8String(item_name)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String name, BigInteger item_id, String item_name) {
        final Function function =
                new Function(
                        FUNC_UPDATE,
                        Arrays.<Type>asList(
                                new Utf8String(name),
                                new Int256(item_id),
                                new Utf8String(item_name)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getUpdateInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_UPDATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Int256>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_UPDATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt remove(String name) {
        final Function function =
                new Function(
                        FUNC_REMOVE,
                        Arrays.<Type>asList(new Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String name, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REMOVE,
                        Arrays.<Type>asList(new Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String name) {
        final Function function =
                new Function(
                        FUNC_REMOVE,
                        Arrays.<Type>asList(new Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REMOVE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_REMOVE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt insert(String name, BigInteger item_id, String item_name) {
        final Function function =
                new Function(
                        FUNC_INSERT,
                        Arrays.<Type>asList(
                                new Utf8String(name),
                                new Int256(item_id),
                                new Utf8String(item_name)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(
            String name, BigInteger item_id, String item_name, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_INSERT,
                        Arrays.<Type>asList(
                                new Utf8String(name),
                                new Int256(item_id),
                                new Utf8String(item_name)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String name, BigInteger item_id, String item_name) {
        final Function function =
                new Function(
                        FUNC_INSERT,
                        Arrays.<Type>asList(
                                new Utf8String(name),
                                new Int256(item_id),
                                new Utf8String(item_name)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getInsertInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_INSERT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Int256>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_INSERT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public Tuple3<List<String>, List<BigInteger>, List<String>> select(String name)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_SELECT,
                        Arrays.<Type>asList(new Utf8String(name)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Int256>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<BigInteger>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()),
                convertToNative((List<Int256>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public List<CreateResultEventResponse> getCreateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses =
                new ArrayList<CreateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<InsertResultEventResponse> getInsertResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses =
                new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses =
                new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses =
                new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TableTest load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TableTest(contractAddress, client, credential);
    }

    public static TableTest deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                TableTest.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                null,
                null,
                null);
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
