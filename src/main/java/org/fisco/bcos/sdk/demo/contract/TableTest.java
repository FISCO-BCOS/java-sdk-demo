package org.fisco.bcos.sdk.demo.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TableTest extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "600681526020017f745f746573740000000000000000000000000000000000000000000000000000815250846040518363ffffffff1660e01b8152600401610d199291906115d1565b60006040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d6e91906110d2565b9050606080600083511115610de45782600081518110610d8a57fe5b602002602001015160000151600081518110610da257fe5b602002602001015160200151915082600081518110610dbd57fe5b602002602001015160000151600181518110610dd557fe5b60200260200101516020015190505b818197509750505050505050915091565b604051806040016040528060608152602001606081525090565b6040518060200160405280606081525090565b6040518060600160405280606081526020016060815260200160006005811115610e4857fe5b81525090565b6040518060200160405280606081525090565b600082601f830112610e7257600080fd5b8151610e85610e80826116b8565b61168b565b9150818183526020840193506020810190508360005b83811015610ecb5781518601610eb18882611006565b845260208401935060208301925050600181019050610e9b565b5050505092915050565b600082601f830112610ee657600080fd5b8151610ef9610ef4826116e0565b61168b565b9150818183526020840193506020810190508360005b83811015610f3f5781518601610f258882611056565b845260208401935060208301925050600181019050610f0f565b5050505092915050565b600081519050610f5881611862565b92915050565b600082601f830112610f6f57600080fd5b8135610f82610f7d82611708565b61168b565b91508082526020830160208301858383011115610f9e57600080fd5b610fa9838284611802565b50505092915050565b600082601f830112610fc357600080fd5b8151610fd6610fd182611708565b61168b565b91508082526020830160208301858383011115610ff257600080fd5b610ffd838284611811565b50505092915050565b60006020828403121561101857600080fd5b611022602061168b565b9050600082015167ffffffffffffffff81111561103e57600080fd5b61104a84828501610ed5565b60008301525092915050565b60006040828403121561106857600080fd5b611072604061168b565b9050600082015167ffffffffffffffff81111561108e57600080fd5b61109a84828501610fb2565b600083015250602082015167ffffffffffffffff8111156110ba57600080fd5b6110c684828501610fb2565b60208301525092915050565b6000602082840312156110e457600080fd5b600082015167ffffffffffffffff8111156110fe57600080fd5b61110a84828501610e61565b91505092915050565b60006020828403121561112557600080fd5b600061113384828501610f49565b91505092915050565b60006020828403121561114e57600080fd5b600082013567ffffffffffffffff81111561116857600080fd5b61117484828501610f5e565b91505092915050565b6000806040838503121561119057600080fd5b600083015167ffffffffffffffff8111156111aa57600080fd5b6111b685828601610fb2565b925050602083015167ffffffffffffffff8111156111d357600080fd5b6111df85828601610fb2565b9150509250929050565b6000806000606084860312156111fe57600080fd5b600084013567ffffffffffffffff81111561121857600080fd5b61122486828701610f5e565b935050602084013567ffffffffffffffff81111561124157600080fd5b61124d86828701610f5e565b925050604084013567ffffffffffffffff81111561126a57600080fd5b61127686828701610f5e565b9150509250925092565b600061128c8383611422565b905092915050565b60006112a083836114cd565b905092915050565b60006112b382611754565b6112bd818561178f565b9350836020820285016112cf85611734565b8060005b8581101561130b57848403895281516112ec8582611280565b94506112f783611775565b925060208a019950506001810190506112d3565b50829750879550505050505092915050565b60006113288261175f565b61133281856117a0565b93508360208202850161134485611744565b8060005b8581101561138057848403895281516113618582611294565b945061136c83611782565b925060208a01995050600181019050611348565b50829750879550505050505092915050565b61139b816117f0565b82525050565b6113aa816117e6565b82525050565b60006113bb8261176a565b6113c581856117b1565b93506113d5818560208601611811565b6113de81611844565b840191505092915050565b60006113f48261176a565b6113fe81856117c2565b935061140e818560208601611811565b61141781611844565b840191505092915050565b6000606083016000830151848203600086015261143f82826113b0565b9150506020830151848203602086015261145982826113b0565b915050604083015161146e6040860182611392565b508091505092915050565b6000602083016000830151848203600086015261149682826112a8565b9150508091505092915050565b600060208301600083015184820360008601526114c0828261131d565b9150508091505092915050565b600060408301600083015184820360008601526114ea82826113b0565b9150506020830151848203602086015261150482826113b0565b9150508091505092915050565b600060208201905061152660008301846113a1565b92915050565b6000602082019050818103600083015261154681846113e9565b905092915050565b6000604082019050818103600083015261156881856113e9565b9050818103602083015261157c81846113e9565b90509392505050565b6000606082019050818103600083015261159f81866113e9565b905081810360208301526115b381856113e9565b905081810360408301526115c781846113e9565b9050949350505050565b600060408201905081810360008301526115eb81856113e9565b905081810360208301526115ff8184611479565b90509392505050565b6000604082019050818103600083015261162281856113e9565b9050818103602083015261163681846114a3565b90509392505050565b6000606082019050818103600083015261165981866113e9565b9050818103602083015261166d81856114a3565b905081810360408301526116818184611479565b9050949350505050565b6000604051905081810181811067ffffffffffffffff821117156116ae57600080fd5b8060405250919050565b600067ffffffffffffffff8211156116cf57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156116f757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561171f57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008190506117e182611855565b919050565b6000819050919050565b60006117fb826117d3565b9050919050565b82818337600083830152505050565b60005b8381101561182f578082015181840152602081019050611814565b8381111561183e576000848401525b50505050565b6000601f19601f8301169050919050565b6006811061185f57fe5b50565b61186b816117e6565b811461187657600080fd5b5056fea2646970667358221220502af980ba76cb7ef7fa5d39160c5ce4bb0ebbd0580d9f75cc4c85875c29518b64736f6c634300060a0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "60806040523480156200001157600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401620000e591906200024a565b602060405180830381600087803b1580156200010057600080fd5b505af115801562000115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013b919062000159565b506200031f565b600081519050620001538162000305565b92915050565b6000602082840312156200016c57600080fd5b60006200017c8482850162000142565b91505092915050565b6000620001928262000298565b6200019e8185620002a3565b9350620001b0818560208601620002be565b620001bb81620002f4565b840191505092915050565b6000620001d5600283620002a3565b91507f69640000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600062000217600883620002a3565b91507f6e616d652c6167650000000000000000000000000000000000000000000000006000830152602082019050919050565b6000606082019050818103600083015262000266818462000185565b905081810360208301526200027b81620001c6565b90508181036040830152620002908162000208565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b83811015620002de578082015181840152602081019050620002c1565b83811115620002ee576000848401525b50505050565b6000601f19601f8301169050919050565b6200031081620002b4565b81146200031c57600080fd5b50565b6118af806200032f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631724a182146100675780635b325d781461009757806386b733f9146100c85780639b6ba099146100f8578063b885d5ac14610128578063c92a780114610159575b600080fd5b610081600480360381019061007c91906111e9565b610189565b60405161008e9190611511565b60405180910390f35b6100b160048036038101906100ac919061113c565b610470565b6040516100bf92919061154e565b60405180910390f35b6100e260048036038101906100dd919061113c565b6106c9565b6040516100ef9190611511565b60405180910390f35b610112600480360381019061010d91906111e9565b6108dc565b60405161011f9190611511565b60405180910390f35b610142600480360381019061013d919061113c565b610c41565b60405161015092919061154e565b60405180910390f35b610173600480360381019061016e91906111e9565b610cfe565b6040516101809190611511565b60405180910390f35b6000610193610df5565b60405180604001604052806040518060400160405280600281526020017f696400000000000000000000000000000000000000000000000000000000000081525081526020018681525090506101e7610df5565b60405180604001604052806040518060400160405280600481526020017f6e616d6500000000000000000000000000000000000000000000000000000000815250815260200186815250905061023b610df5565b60405180604001604052806040518060400160405280600381526020017f616765000000000000000000000000000000000000000000000000000000000081525081526020018681525090506060600367ffffffffffffffff811180156102a157600080fd5b506040519080825280602002602001820160405280156102db57816020015b6102c8610df5565b8152602001906001900390816102c05790505b50905083816000815181106102ec57fe5b6020026020010181905250828160018151811061030557fe5b6020026020010181905250818160028151811061031e57fe5b6020026020010181905250610331610e0f565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397390eed6040518060400160405280600681526020017f745f746573740000000000000000000000000000000000000000000000000000815250846040518363ffffffff1660e01b81526004016103d5929190611608565b602060405180830381600087803b1580156103ef57600080fd5b505af1158015610403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104279190611113565b90507fdfc533ec2b52797a1229dc2495dbd3f4948f7c4c982ec077ad9d80810ec5c1f9816040516104589190611511565b60405180910390a18096505050505050509392505050565b60608061047b610e22565b60405180606001604052806040518060400160405280600281526020017f69640000000000000000000000000000000000000000000000000000000000008152508152602001858152602001600060058111156104d457fe5b81525090506060600167ffffffffffffffff811180156104f357600080fd5b5060405190808252806020026020018201604052801561052d57816020015b61051a610e22565b8152602001906001900390816105125790505b509050818160008151811061053e57fe5b6020026020010181905250610551610e4e565b81816000018190525060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663575b65416040518060400160405280600681526020017f745f746573740000000000000000000000000000000000000000000000000000815250846040518363ffffffff1660e01b81526004016105ed9291906115d1565b60006040518083038186803b15801561060557600080fd5b505afa158015610619573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061064291906110d2565b90506060806000835111156106b8578260008151811061065e57fe5b60200260200101516000015160008151811061067657fe5b60200260200101516020015191508260008151811061069157fe5b6020026020010151600001516001815181106106a957fe5b60200260200101516020015190505b818197509750505050505050915091565b60006106d3610e22565b60405180606001604052806040518060400160405280600281526020017f696400000000000000000000000000000000000000000000000000000000000081525081526020018481526020016000600581111561072c57fe5b81525090506060600167ffffffffffffffff8111801561074b57600080fd5b5060405190808252806020026020018201604052801561078557816020015b610772610e22565b81526020019060019003908161076a5790505b509050818160008151811061079657fe5b60200260200101819052506107a9610e4e565b81816000018190525060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360620ca76040518060400160405280600681526020017f745f746573740000000000000000000000000000000000000000000000000000815250846040518363ffffffff1660e01b81526004016108459291906115d1565b602060405180830381600087803b15801561085f57600080fd5b505af1158015610873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108979190611113565b90507fe7769b56c2afa8e40381956f76b91d9ec19c34c0a81791702fdcae68e35a7271816040516108c89190611511565b60405180910390a180945050505050919050565b60006108e6610df5565b60405180604001604052806040518060400160405280600481526020017f6e616d6500000000000000000000000000000000000000000000000000000000815250815260200185815250905061093a610df5565b60405180604001604052806040518060400160405280600381526020017f616765000000000000000000000000000000000000000000000000000000000081525081526020018581525090506060600267ffffffffffffffff811180156109a057600080fd5b506040519080825280602002602001820160405280156109da57816020015b6109c7610df5565b8152602001906001900390816109bf5790505b50905082816000815181106109eb57fe5b60200260200101819052508181600181518110610a0457fe5b6020026020010181905250610a17610e0f565b6040518060200160405280838152509050610a30610e22565b60405180606001604052806040518060400160405280600281526020017f696400000000000000000000000000000000000000000000000000000000000081525081526020018a815260200160006005811115610a8957fe5b81525090506060600167ffffffffffffffff81118015610aa857600080fd5b50604051908082528060200260200182016040528015610ae257816020015b610acf610e22565b815260200190600190039081610ac75790505b5090508181600081518110610af357fe5b6020026020010181905250610b06610e4e565b81816000018190525060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f6c93936040518060400160405280600681526020017f745f74657374000000000000000000000000000000000000000000000000000081525087856040518463ffffffff1660e01b8152600401610ba49392919061163f565b602060405180830381600087803b158015610bbe57600080fd5b505af1158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf69190611113565b90507fd72ab475a08df05fbd4f7f8cb4db1ad9dbdc26f54437fa6794acd97357779d2a81604051610c279190611511565b60405180910390a180985050505050505050509392505050565b6060806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b885d5ac846040518263ffffffff1660e01b8152600401610c9e919061152c565b600060405180830381600087803b158015610cb857600080fd5b505af1158015610ccc573d6000803e3d6000fd5b50505050",
        "6040513d6000823e3d601f19601f82011682018060405250810190610cf5919061117d565b91509150915091565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78018686866040518463ffffffff1660e01b8152600401610d5f93929190611585565b602060405180830381600087803b158015610d7957600080fd5b505af1158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db19190611113565b90507f38411b2ef21b6826a8b9f48a1baa6b3388c3354ebdc5db749b35830ec581722d81604051610de29190611511565b60405180910390a1809150509392505050565b604051806040016040528060608152602001606081525090565b6040518060200160405280606081525090565b6040518060600160405280606081526020016060815260200160006005811115610e4857fe5b81525090565b6040518060200160405280606081525090565b600082601f830112610e7257600080fd5b8151610e85610e80826116b8565b61168b565b9150818183526020840193506020810190508360005b83811015610ecb5781518601610eb18882611006565b845260208401935060208301925050600181019050610e9b565b5050505092915050565b600082601f830112610ee657600080fd5b8151610ef9610ef4826116e0565b61168b565b9150818183526020840193506020810190508360005b83811015610f3f5781518601610f258882611056565b845260208401935060208301925050600181019050610f0f565b5050505092915050565b600081519050610f5881611862565b92915050565b600082601f830112610f6f57600080fd5b8135610f82610f7d82611708565b61168b565b91508082526020830160208301858383011115610f9e57600080fd5b610fa9838284611802565b50505092915050565b600082601f830112610fc357600080fd5b8151610fd6610fd182611708565b61168b565b91508082526020830160208301858383011115610ff257600080fd5b610ffd838284611811565b50505092915050565b60006020828403121561101857600080fd5b611022602061168b565b9050600082015167ffffffffffffffff81111561103e57600080fd5b61104a84828501610ed5565b60008301525092915050565b60006040828403121561106857600080fd5b611072604061168b565b9050600082015167ffffffffffffffff81111561108e57600080fd5b61109a84828501610fb2565b600083015250602082015167ffffffffffffffff8111156110ba57600080fd5b6110c684828501610fb2565b60208301525092915050565b6000602082840312156110e457600080fd5b600082015167ffffffffffffffff8111156110fe57600080fd5b61110a84828501610e61565b91505092915050565b60006020828403121561112557600080fd5b600061113384828501610f49565b91505092915050565b60006020828403121561114e57600080fd5b600082013567ffffffffffffffff81111561116857600080fd5b61117484828501610f5e565b91505092915050565b6000806040838503121561119057600080fd5b600083015167ffffffffffffffff8111156111aa57600080fd5b6111b685828601610fb2565b925050602083015167ffffffffffffffff8111156111d357600080fd5b6111df85828601610fb2565b9150509250929050565b6000806000606084860312156111fe57600080fd5b600084013567ffffffffffffffff81111561121857600080fd5b61122486828701610f5e565b935050602084013567ffffffffffffffff81111561124157600080fd5b61124d86828701610f5e565b925050604084013567ffffffffffffffff81111561126a57600080fd5b61127686828701610f5e565b9150509250925092565b600061128c8383611422565b905092915050565b60006112a083836114cd565b905092915050565b60006112b382611754565b6112bd818561178f565b9350836020820285016112cf85611734565b8060005b8581101561130b57848403895281516112ec8582611280565b94506112f783611775565b925060208a019950506001810190506112d3565b50829750879550505050505092915050565b60006113288261175f565b61133281856117a0565b93508360208202850161134485611744565b8060005b8581101561138057848403895281516113618582611294565b945061136c83611782565b925060208a01995050600181019050611348565b50829750879550505050505092915050565b61139b816117f0565b82525050565b6113aa816117e6565b82525050565b60006113bb8261176a565b6113c581856117b1565b93506113d5818560208601611811565b6113de81611844565b840191505092915050565b60006113f48261176a565b6113fe81856117c2565b935061140e818560208601611811565b61141781611844565b840191505092915050565b6000606083016000830151848203600086015261143f82826113b0565b9150506020830151848203602086015261145982826113b0565b915050604083015161146e6040860182611392565b508091505092915050565b6000602083016000830151848203600086015261149682826112a8565b9150508091505092915050565b600060208301600083015184820360008601526114c0828261131d565b9150508091505092915050565b600060408301600083015184820360008601526114ea82826113b0565b9150506020830151848203602086015261150482826113b0565b9150508091505092915050565b600060208201905061152660008301846113a1565b92915050565b6000602082019050818103600083015261154681846113e9565b905092915050565b6000604082019050818103600083015261156881856113e9565b9050818103602083015261157c81846113e9565b90509392505050565b6000606082019050818103600083015261159f81866113e9565b905081810360208301526115b381856113e9565b905081810360408301526115c781846113e9565b9050949350505050565b600060408201905081810360008301526115eb81856113e9565b905081810360208301526115ff8184611479565b90509392505050565b6000604082019050818103600083015261162281856113e9565b9050818103602083015261163681846114a3565b90509392505050565b6000606082019050818103600083015261165981866113e9565b9050818103602083015261166d81856114a3565b905081810360408301526116818184611479565b9050949350505050565b6000604051905081810181811067ffffffffffffffff821117156116ae57600080fd5b8060405250919050565b600067ffffffffffffffff8211156116cf57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156116f757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561171f57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008190506117e182611855565b919050565b6000819050919050565b60006117fb826117d3565b9050919050565b82818337600083830152505050565b60005b8381101561182f578082015181840152602081019050611814565b8381111561183e576000848401525b50505050565b6000601f19601f8301169050919050565b6006811061185f57fe5b50565b61186b816117e6565b811461187657600080fd5b5056fea2646970667358221220deb31f2007feb48bcf7492302000d584daad694bc1d9a9afe73a71f1afdb25c064736f6c634300060a0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fields\",\"type\":\"string\"}],\"name\":\"createTable\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"}],\"name\":\"desc\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"age\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"age\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_CREATETABLE = "createTable";

    public static final String FUNC_DESC = "desc";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_UPDATE = "update";

    public static final Event CREATERESULT_EVENT =
            new Event(
                    "CreateResult",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));;

    public static final Event INSERTRESULT_EVENT =
            new Event(
                    "InsertResult",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));;

    public static final Event REMOVERESULT_EVENT =
            new Event(
                    "RemoveResult",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));;

    public static final Event UPDATERESULT_EVENT =
            new Event(
                    "UpdateResult",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));;

    protected TableTest(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<CreateResultEventResponse> getCreateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses =
                new ArrayList<CreateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<InsertResultEventResponse> getInsertResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses =
                new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses =
                new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses =
                new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt createTable(String tableName, String key, String fields) {
        final Function function =
                new Function(
                        FUNC_CREATETABLE,
                        Arrays.<Type>asList(
                                new Utf8String(tableName),
                                new Utf8String(key),
                                new Utf8String(fields)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createTable(
            String tableName, String key, String fields, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_CREATETABLE,
                        Arrays.<Type>asList(
                                new Utf8String(tableName),
                                new Utf8String(key),
                                new Utf8String(fields)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateTable(String tableName, String key, String fields) {
        final Function function =
                new Function(
                        FUNC_CREATETABLE,
                        Arrays.<Type>asList(
                                new Utf8String(tableName),
                                new Utf8String(key),
                                new Utf8String(fields)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getCreateTableInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CREATETABLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<BigInteger> getCreateTableOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CREATETABLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt desc(String tableName) {
        final Function function =
                new Function(
                        FUNC_DESC,
                        Arrays.<Type>asList(new Utf8String(tableName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void desc(String tableName, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DESC,
                        Arrays.<Type>asList(new Utf8String(tableName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDesc(String tableName) {
        final Function function =
                new Function(
                        FUNC_DESC,
                        Arrays.<Type>asList(new Utf8String(tableName)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDescInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DESC,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple2<String, String> getDescOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DESC,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt insert(String id, String name, String age) {
        final Function function =
                new Function(
                        FUNC_INSERT,
                        Arrays.<Type>asList(
                                new Utf8String(id), new Utf8String(name), new Utf8String(age)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(String id, String name, String age, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_INSERT,
                        Arrays.<Type>asList(
                                new Utf8String(id), new Utf8String(name), new Utf8String(age)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String id, String name, String age) {
        final Function function =
                new Function(
                        FUNC_INSERT,
                        Arrays.<Type>asList(
                                new Utf8String(id), new Utf8String(name), new Utf8String(age)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_INSERT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_INSERT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt remove(String id) {
        final Function function =
                new Function(
                        FUNC_REMOVE,
                        Arrays.<Type>asList(new Utf8String(id)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String id, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REMOVE,
                        Arrays.<Type>asList(new Utf8String(id)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String id) {
        final Function function =
                new Function(
                        FUNC_REMOVE,
                        Arrays.<Type>asList(new Utf8String(id)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REMOVE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_REMOVE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public Tuple2<String, String> select(String id) throws ContractException {
        final Function function =
                new Function(
                        FUNC_SELECT,
                        Arrays.<Type>asList(new Utf8String(id)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt update(String id, String name, String age) {
        final Function function =
                new Function(
                        FUNC_UPDATE,
                        Arrays.<Type>asList(
                                new Utf8String(id), new Utf8String(name), new Utf8String(age)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update(String id, String name, String age, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_UPDATE,
                        Arrays.<Type>asList(
                                new Utf8String(id), new Utf8String(name), new Utf8String(age)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String id, String name, String age) {
        final Function function =
                new Function(
                        FUNC_UPDATE,
                        Arrays.<Type>asList(
                                new Utf8String(id), new Utf8String(name), new Utf8String(age)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_UPDATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_UPDATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public static TableTest load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TableTest(contractAddress, client, credential);
    }

    public static TableTest deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                TableTest.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                null,
                null,
                null);
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
