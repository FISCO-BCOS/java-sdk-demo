package org.fisco.bcos.sdk.demo.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ParallelSmallbank extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "602001604051809103902054905060006002836040518082805190602001908083835b60208310610fe35780518252602082019150602081019050602083039250610fc0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054905060006002856040518082805190602001908083835b60208310611051578051825260208201915060208101905060208303925061102e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055508082016001846040518082805190602001908083835b602083106110c1578051825260208201915060208101905060208303925061109e565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208190555050505050565b61113e6040518060400160405280601d81526020017f75706461746562616c616e636528737472696e672c75696e74323536290000008152506001610ac7565b611161604051806060016040528060228152602001611394602291396002610ac7565b565b60006002846040518082805190602001908083835b6020831061119b5780518252602082019150602081019050602083039250611178565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054905060006002846040518082805190602001908083835b6020831061120957805182526020820191506020810190506020830392506111e6565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050600083905080830392508082019150826002876040518082805190602001908083835b602083106112855780518252602082019150602081019050602083039250611262565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550816002866040518082805190602001908083835b602083106112f357805182526020820191506020810190506020830392506112d0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550505050505050565b6113706040518060400160405280601d81526020017f75706461746562616c616e636528737472696e672c75696e7432353629000000815250610d08565b61139160405180606001604052806022815260200161139460229139610d08565b56fe73656e647061796d656e7428737472696e672c737472696e672c75696e7432353629a26469706673582212209729cc43225fdd7d6437e3b4f64106310312a6262d9e25ad7d5dbc1293700ec564736f6c634300060a0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "518252602082019150602081019050602083039250610f94565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550611064565b8083036002866040518082805190602001908083835b6020831061102c5780518252602082019150602081019050602083039250611009565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055505b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc536a623084846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611132578082015181840152602081019050611117565b50505050905090810190601f16801561115f5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561118057600080fd5b505af1158015611194573d6000803e3d6000fd5b505050506040513d60208110156111aa57600080fd5b8101908080519060200190929190505050505050565b60006001836040518082805190602001908083835b602083106111f857805182526020820191506020810190506020830392506111d5565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054905060008290508082016001856040518082805190602001908083835b6020831061126c5780518252602082019150602081019050602083039250611249565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208190555050505050565b60006002836040518082805190602001908083835b602083106112e157805182526020820191506020810190506020830392506112be565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054905060008290508082016002856040518082805190602001908083835b602083106113555780518252602082019150602081019050602083039250611332565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055505050505056fe73656e647061796d656e7428737472696e672c737472696e672c75696e7432353629a2646970667358221220cfb376594ad41335616e9457f1efd488ff0dab1162b77f9ddfd36b364b07f83c64736f6c634300060a0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"arg0\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arg1\",\"type\":\"string\"}],\"name\":\"almagate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableParallel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableParallel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"arg0\",\"type\":\"string\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"criticalSize\",\"type\":\"uint256\"}],\"name\":\"registerParallelFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"arg0\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arg1\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"arg2\",\"type\":\"uint256\"}],\"name\":\"sendPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"}],\"name\":\"unregisterParallelFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"arg0\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"arg1\",\"type\":\"uint256\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"arg0\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"arg1\",\"type\":\"uint256\"}],\"name\":\"updateSaving\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"arg0\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"arg1\",\"type\":\"uint256\"}],\"name\":\"writeCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ALMAGATE = "almagate";

    public static final String FUNC_DISABLEPARALLEL = "disableParallel";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_SENDPAYMENT = "sendPayment";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_UPDATEBALANCE = "updateBalance";

    public static final String FUNC_UPDATESAVING = "updateSaving";

    public static final String FUNC_WRITECHECK = "writeCheck";

    protected ParallelSmallbank(
            String contractAddress, String address, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public TransactionReceipt almagate(String arg0, String arg1) {
        final Function function =
                new Function(
                        FUNC_ALMAGATE,
                        Arrays.<Type>asList(new Utf8String(arg0), new Utf8String(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void almagate(String arg0, String arg1, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ALMAGATE,
                        Arrays.<Type>asList(new Utf8String(arg0), new Utf8String(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAlmagate(String arg0, String arg1) {
        final Function function =
                new Function(
                        FUNC_ALMAGATE,
                        Arrays.<Type>asList(new Utf8String(arg0), new Utf8String(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getAlmagateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ALMAGATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt disableParallel() {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void disableParallel(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDisableParallel() {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt enableParallel() {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void enableParallel(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEnableParallel() {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger getBalance(String arg0) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBALANCE,
                        Arrays.<Type>asList(new Utf8String(arg0)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt registerParallelFunction(
            String functionName, BigInteger criticalSize) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new Utf8String(functionName), new Uint256(criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerParallelFunction(
            String functionName, BigInteger criticalSize, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new Utf8String(functionName), new Uint256(criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterParallelFunction(
            String functionName, BigInteger criticalSize) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new Utf8String(functionName), new Uint256(criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterParallelFunctionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt sendPayment(String arg0, String arg1, BigInteger arg2) {
        final Function function =
                new Function(
                        FUNC_SENDPAYMENT,
                        Arrays.<Type>asList(
                                new Utf8String(arg0), new Utf8String(arg1), new Uint256(arg2)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void sendPayment(
            String arg0, String arg1, BigInteger arg2, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDPAYMENT,
                        Arrays.<Type>asList(
                                new Utf8String(arg0), new Utf8String(arg1), new Uint256(arg2)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendPayment(String arg0, String arg1, BigInteger arg2) {
        final Function function =
                new Function(
                        FUNC_SENDPAYMENT,
                        Arrays.<Type>asList(
                                new Utf8String(arg0), new Utf8String(arg1), new Uint256(arg2)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSendPaymentInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDPAYMENT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt unregisterParallelFunction(String functionName) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(new Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unregisterParallelFunction(String functionName, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(new Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregisterParallelFunction(String functionName) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(new Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUnregisterParallelFunctionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt updateBalance(String arg0, BigInteger arg1) {
        final Function function =
                new Function(
                        FUNC_UPDATEBALANCE,
                        Arrays.<Type>asList(new Utf8String(arg0), new Uint256(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateBalance(String arg0, BigInteger arg1, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_UPDATEBALANCE,
                        Arrays.<Type>asList(new Utf8String(arg0), new Uint256(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateBalance(String arg0, BigInteger arg1) {
        final Function function =
                new Function(
                        FUNC_UPDATEBALANCE,
                        Arrays.<Type>asList(new Utf8String(arg0), new Uint256(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_UPDATEBALANCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt updateSaving(String arg0, BigInteger arg1) {
        final Function function =
                new Function(
                        FUNC_UPDATESAVING,
                        Arrays.<Type>asList(new Utf8String(arg0), new Uint256(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateSaving(String arg0, BigInteger arg1, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_UPDATESAVING,
                        Arrays.<Type>asList(new Utf8String(arg0), new Uint256(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateSaving(String arg0, BigInteger arg1) {
        final Function function =
                new Function(
                        FUNC_UPDATESAVING,
                        Arrays.<Type>asList(new Utf8String(arg0), new Uint256(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateSavingInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_UPDATESAVING,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt writeCheck(String arg0, BigInteger arg1) {
        final Function function =
                new Function(
                        FUNC_WRITECHECK,
                        Arrays.<Type>asList(new Utf8String(arg0), new Uint256(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void writeCheck(String arg0, BigInteger arg1, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_WRITECHECK,
                        Arrays.<Type>asList(new Utf8String(arg0), new Uint256(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForWriteCheck(String arg0, BigInteger arg1) {
        final Function function =
                new Function(
                        FUNC_WRITECHECK,
                        Arrays.<Type>asList(new Utf8String(arg0), new Uint256(arg1)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getWriteCheckInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_WRITECHECK,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public static ParallelSmallbank load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new ParallelSmallbank(contractAddress, contractAddress, client, credential);
    }

    public static ParallelSmallbank deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                ParallelSmallbank.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                null,
                null,
                null);
    }
}
