package org.fisco.bcos.sdk.demo.contract.dgms;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class OneToMore extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "",
        "6120c6565b935050602061236d86828701612281565b925050604084013567ffffffffffffffff81111561238a57600080fd5b612396868287016121d5565b9150509250925092565b6000602082840312156123b257600080fd5b600082013567ffffffffffffffff8111156123cc57600080fd5b6123d8848285016120da565b91505092915050565b6000602082840312156123f357600080fd5b600082013567ffffffffffffffff81111561240d57600080fd5b61241984828501612150565b91505092915050565b60006020828403121561243457600080fd5b600061244284828501612281565b91505092915050565b6000806040838503121561245e57600080fd5b600061246c85828601612281565b925050602083013567ffffffffffffffff81111561248957600080fd5b612495858286016121d5565b9150509250929050565b6124a881612ecd565b82525050565b60006124b982612e94565b8084526020840193506124cb83612e87565b60005b828110156124fd576124e1868351612a7c565b6124ea82612ec0565b91506020860195506001810190506124ce565b50849250505092915050565b61251281612eed565b82525050565b600061252382612e9f565b808452612537816020860160208601612f3c565b61254081612f6f565b602085010191505092915050565b600061255982612eb5565b80845261256d816020860160208601612f3c565b61257681612f6f565b602085010191505092915050565b600061258f82612eaa565b8084526125a3816020860160208601612f3c565b6125ac81612f6f565b602085010191505092915050565b6000601c82527f31373a206163636f756e7420616c72656164792068617320726f6c65000000006020830152604082019050919050565b6000601e82527f32303a206173736574496420686173206265656e2064657374726f79656400006020830152604082019050919050565b6000601c82527f31333a2073656e6420746f20746865207a65726f2061646472657373000000006020830152604082019050919050565b6000602d82527f30343a2063616c6c657220646f6573206e6f742068617665207468652073757060208301527f6572207065726d697373696f6e000000000000000000000000000000000000006040830152606082019050919050565b6000601e82527f31383a206163636f756e7420646f6573206e6f74206861766520726f6c6500006020830152604082019050919050565b6000601f82527f31313a206173736574496420646f6573206e6f742068617665206f776e6572006020830152604082019050919050565b6000603082527f31343a206e657720746f74616c417373657473206d757374206e6f742062652060208301527f6c657373207468616e206265666f7265000000000000000000000000000000006040830152606082019050919050565b6000602b82527f31363a206173736574496e666f2773206c656e677468206d757374206571756160208301527f6c20746f206265666f72650000000000000000000000000000000000000000006040830152606082019050919050565b6000601d82527f30363a20636f6e7472616374206973206e6f742073757370656e6465640000006020830152604082019050919050565b6000601f82527f31393a206163636f756e7420697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601a82527f31303a206173736574496420616c7265616479206973737565640000000000006020830152604082019050919050565b6000602182527f31323a2073656e64657220646f6573206e6f74206f776e20746865206173736560208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602d82527f31353a20746f74616c4173736574732773206c656e677468206d75737420657160208301527f75616c20746f206265666f7265000000000000000000000000000000000000006040830152606082019050919050565b6000601e82527f30383a20617373657449642065786365656420746f74616c41737365747300006020830152604082019050919050565b6000601d82527f30393a20697373756520746f20746865207a65726f20616464726573730000006020830152604082019050919050565b6000601982527f30353a20636f6e74726163742069732073757370656e646564000000000000006020830152604082019050919050565b6000601782527f30373a20496e76616c696420746f74616c4173736574730000000000000000006020830152604082019050919050565b6000602e82527f30333a2063616c6c657220646f6573206e6f742068617665207468652069737360208301527f756572207065726d697373696f6e0000000000000000000000000000000000006040830152606082019050919050565b612a8581612ef9565b82525050565b6000602082019050612aa0600083018461249f565b92915050565b60006020820190508181036000830152612ac081846124ae565b905092915050565b6000602082019050612add6000830184612509565b92915050565b60006020820190508181036000830152612afd8184612584565b905092915050565b60006020820190508181036000830152612b1f818461254e565b905092915050565b60006020820190508181036000830152612b40816125ba565b9050919050565b60006020820190508181036000830152612b60816125f1565b9050919050565b60006020820190508181036000830152612b8081612628565b9050919050565b60006020820190508181036000830152612ba08161265f565b9050919050565b60006020820190508181036000830152612bc0816126bc565b9050919050565b60006020820190508181036000830152612be0816126f3565b9050919050565b60006020820190508181036000830152612c008161272a565b9050919050565b60006020820190508181036000830152612c2081612787565b9050919050565b60006020820190508181036000830152612c40816127e4565b9050919050565b60006020820190508181036000830152612c608161281b565b9050919050565b60006020820190508181036000830152612c8081612852565b9050919050565b60006020820190508181036000830152612ca081612889565b9050919050565b60006020820190508181036000830152612cc0816128e6565b9050919050565b60006020820190508181036000830152612ce081612943565b9050919050565b60006020820190508181036000830152612d008161297a565b9050919050565b60006020820190508181036000830152612d20816129b1565b9050919050565b60006020820190508181036000830152612d40816129e8565b9050919050565b60006020820190508181036000830152612d6081612a1f565b9050919050565b6000602082019050612d7c6000830184612a7c565b92915050565b6000604082019050612d976000830185612a7c565b8181036020830152612da98184612518565b90509392505050565b6000604051905081810181811067ffffffffffffffff82111715612dd557600080fd5b8060405250919050565b600067ffffffffffffffff821115612df657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612e1e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612e4657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115612e7257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612f5a578082015181840152602081019050612f3f565b83811115612f69576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820d36b7044454d63048a38cfb46b5a09dd20d3aa7a156b3dcbe78767b35cbfbf136c6578706572696d656e74616cf50037"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "",
        "6120c6565b935050602061236d86828701612281565b925050604084013567ffffffffffffffff81111561238a57600080fd5b612396868287016121d5565b9150509250925092565b6000602082840312156123b257600080fd5b600082013567ffffffffffffffff8111156123cc57600080fd5b6123d8848285016120da565b91505092915050565b6000602082840312156123f357600080fd5b600082013567ffffffffffffffff81111561240d57600080fd5b61241984828501612150565b91505092915050565b60006020828403121561243457600080fd5b600061244284828501612281565b91505092915050565b6000806040838503121561245e57600080fd5b600061246c85828601612281565b925050602083013567ffffffffffffffff81111561248957600080fd5b612495858286016121d5565b9150509250929050565b6124a881612ecd565b82525050565b60006124b982612e94565b8084526020840193506124cb83612e87565b60005b828110156124fd576124e1868351612a7c565b6124ea82612ec0565b91506020860195506001810190506124ce565b50849250505092915050565b61251281612eed565b82525050565b600061252382612e9f565b808452612537816020860160208601612f3c565b61254081612f6f565b602085010191505092915050565b600061255982612eb5565b80845261256d816020860160208601612f3c565b61257681612f6f565b602085010191505092915050565b600061258f82612eaa565b8084526125a3816020860160208601612f3c565b6125ac81612f6f565b602085010191505092915050565b6000603082527f31343a206e657720746f74616c417373657473206d757374206e6f742062652060208301527f6c657373207468616e206265666f7265000000000000000000000000000000006040830152606082019050919050565b6000602b82527f31363a206173736574496e666f2773206c656e677468206d757374206571756160208301527f6c20746f206265666f72650000000000000000000000000000000000000000006040830152606082019050919050565b6000601f82527f31313a206173736574496420646f6573206e6f742068617665206f776e6572006020830152604082019050919050565b6000601e82527f31383a206163636f756e7420646f6573206e6f74206861766520726f6c6500006020830152604082019050919050565b6000602d82527f31353a20746f74616c4173736574732773206c656e677468206d75737420657160208301527f75616c20746f206265666f7265000000000000000000000000000000000000006040830152606082019050919050565b6000601c82527f31333a2073656e6420746f20746865207a65726f2061646472657373000000006020830152604082019050919050565b6000601f82527f31393a206163636f756e7420697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601e82527f30383a20617373657449642065786365656420746f74616c41737365747300006020830152604082019050919050565b6000602e82527f30333a2063616c6c657220646f6573206e6f742068617665207468652069737360208301527f756572207065726d697373696f6e0000000000000000000000000000000000006040830152606082019050919050565b6000602182527f31323a2073656e64657220646f6573206e6f74206f776e20746865206173736560208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602d82527f30343a2063616c6c657220646f6573206e6f742068617665207468652073757060208301527f6572207065726d697373696f6e000000000000000000000000000000000000006040830152606082019050919050565b6000601782527f30373a20496e76616c696420746f74616c4173736574730000000000000000006020830152604082019050919050565b6000601982527f30353a20636f6e74726163742069732073757370656e646564000000000000006020830152604082019050919050565b6000601a82527f31303a206173736574496420616c7265616479206973737565640000000000006020830152604082019050919050565b6000601e82527f32303a206173736574496420686173206265656e2064657374726f79656400006020830152604082019050919050565b6000601d82527f30363a20636f6e7472616374206973206e6f742073757370656e6465640000006020830152604082019050919050565b6000601d82527f30393a20697373756520746f20746865207a65726f20616464726573730000006020830152604082019050919050565b6000601c82527f31373a206163636f756e7420616c72656164792068617320726f6c65000000006020830152604082019050919050565b612a8581612ef9565b82525050565b6000602082019050612aa0600083018461249f565b92915050565b60006020820190508181036000830152612ac081846124ae565b905092915050565b6000602082019050612add6000830184612509565b92915050565b60006020820190508181036000830152612afd8184612584565b905092915050565b60006020820190508181036000830152612b1f818461254e565b905092915050565b60006020820190508181036000830152612b40816125ba565b9050919050565b60006020820190508181036000830152612b6081612617565b9050919050565b60006020820190508181036000830152612b8081612674565b9050919050565b60006020820190508181036000830152612ba0816126ab565b9050919050565b60006020820190508181036000830152612bc0816126e2565b9050919050565b60006020820190508181036000830152612be08161273f565b9050919050565b60006020820190508181036000830152612c0081612776565b9050919050565b60006020820190508181036000830152612c20816127ad565b9050919050565b60006020820190508181036000830152612c40816127e4565b9050919050565b60006020820190508181036000830152612c6081612841565b9050919050565b60006020820190508181036000830152612c808161289e565b9050919050565b60006020820190508181036000830152612ca0816128fb565b9050919050565b60006020820190508181036000830152612cc081612932565b9050919050565b60006020820190508181036000830152612ce081612969565b9050919050565b60006020820190508181036000830152612d00816129a0565b9050919050565b60006020820190508181036000830152612d20816129d7565b9050919050565b60006020820190508181036000830152612d4081612a0e565b9050919050565b60006020820190508181036000830152612d6081612a45565b9050919050565b6000602082019050612d7c6000830184612a7c565b92915050565b6000604082019050612d976000830185612a7c565b8181036020830152612da98184612518565b90509392505050565b6000604051905081810181811067ffffffffffffffff82111715612dd557600080fd5b8060405250919050565b600067ffffffffffffffff821115612df657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612e1e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612e4657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115612e7257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612f5a578082015181840152602081019050612f3f565b83811115612f69576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058208ec3da9443ee3a09edd688d368c90073d9f73f6d564b2b880fb6b6be29fce2696c6578706572696d656e74616cf50037"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":3,\"value\":[0]},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]},{\"kind\":4,\"value\":[8]},{\"kind\":4,\"value\":[10]}],\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"selector\":[65000572,2329408832],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addIssuer\",\"outputs\":[],\"payable\":false,\"selector\":[543772080,596820072],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeIssuer\",\"outputs\":[],\"payable\":false,\"selector\":[1203531923,2051880263],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[7]}],\"constant\":false,\"inputs\":[{\"name\":\"totalAssets\",\"type\":\"uint256[]\"}],\"name\":\"updateTotalAssets\",\"outputs\":[],\"payable\":false,\"selector\":[1230926449,2482264895],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":3,\"value\":[0]}],\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"selector\":[1666326814,1460761419],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[7]}],\"constant\":false,\"inputs\":[],\"name\":\"getTotalAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"selector\":[1845964843,391521355],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[2]}],\"constant\":true,\"inputs\":[],\"name\":\"suspended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"selector\":[1882127859,2039485372],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[5]},{\"kind\":4,\"value\":[7]},{\"kind\":4,\"slot\":6,\"value\":[1]},{\"kind\":4,\"slot\":7,\"value\":[0]}],\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"infoOf\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"selector\":[2025033526,3509631437],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"selector\":[2273024615,45068934],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[8]}],\"constant\":true,\"inputs\":[],\"name\":\"getValidAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"selector\":[2312654867,2935780746],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[5]}],\"constant\":false,\"inputs\":[{\"name\":\"info\",\"type\":\"string[]\"}],\"name\":\"updateInfo\",\"outputs\":[],\"payable\":false,\"selector\":[2329396480,1280088904],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[10]}],\"constant\":true,\"inputs\":[],\"name\":\"blackHole\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"selector\":[2660301226,961777779],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[9]}],\"constant\":true,\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"selector\":[3408852727,129655028],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":3,\"value\":[2]},{\"kind\":4,\"value\":[2]}],\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendFrom\",\"outputs\":[],\"payable\":false,\"selector\":[3504854545,2159217471],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"constant\":false,\"inputs\":[],\"name\":\"unSuspend\",\"outputs\":[],\"payable\":false,\"selector\":[3623580105,1304026934],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1]},{\"kind\":4,\"value\":[2]}],\"constant\":false,\"inputs\":[],\"name\":\"suspend\",\"outputs\":[],\"payable\":false,\"selector\":[3862956990,1796534436],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":3,\"value\":[1]},{\"kind\":4,\"value\":[7]},{\"kind\":4,\"value\":[8]}],\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"issueAsset\",\"outputs\":[],\"payable\":false,\"selector\":[3925475940,510983586],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getHasAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"selector\":[4123727866,1311455571],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"totalAssets\",\"type\":\"uint256[]\"},{\"name\":\"info\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Suspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IssuerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IssuerRemoved\",\"type\":\"event\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_DESTROY = "destroy";

    public static final String FUNC_ADDISSUER = "addIssuer";

    public static final String FUNC_REMOVEISSUER = "removeIssuer";

    public static final String FUNC_UPDATETOTALASSETS = "updateTotalAssets";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_GETTOTALASSETS = "getTotalAssets";

    public static final String FUNC_SUSPENDED = "suspended";

    public static final String FUNC_INFOOF = "infoOf";

    public static final String FUNC_ISISSUER = "isIssuer";

    public static final String FUNC_GETVALIDASSETS = "getValidAssets";

    public static final String FUNC_UPDATEINFO = "updateInfo";

    public static final String FUNC_BLACKHOLE = "blackHole";

    public static final String FUNC_CONTRACTTYPE = "contractType";

    public static final String FUNC_SENDFROM = "sendFrom";

    public static final String FUNC_UNSUSPEND = "unSuspend";

    public static final String FUNC_SUSPEND = "suspend";

    public static final String FUNC_ISSUEASSET = "issueAsset";

    public static final String FUNC_GETHASAMOUNT = "getHasAmount";

    public static final Event SEND_EVENT =
            new Event(
                    "Send",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint256>() {},
                            new TypeReference<DynamicBytes>() {}));;

    public static final Event ISSUE_EVENT =
            new Event(
                    "Issue",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint256>() {},
                            new TypeReference<DynamicBytes>() {}));;

    public static final Event SUSPENDED_EVENT =
            new Event(
                    "Suspended", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));;

    public static final Event UNSUSPENDED_EVENT =
            new Event(
                    "UnSuspended",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));;

    public static final Event ISSUERADDED_EVENT =
            new Event(
                    "IssuerAdded",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));;

    public static final Event ISSUERREMOVED_EVENT =
            new Event(
                    "IssuerRemoved",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));;

    protected OneToMore(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public TransactionReceipt destroy(BigInteger assetId, byte[] data) {
        final Function function =
                new Function(
                        FUNC_DESTROY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String destroy(BigInteger assetId, byte[] data, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DESTROY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDestroy(BigInteger assetId, byte[] data) {
        final Function function =
                new Function(
                        FUNC_DESTROY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, byte[]> getDestroyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DESTROY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, byte[]>(
                (BigInteger) results.get(0).getValue(), (byte[]) results.get(1).getValue());
    }

    public TransactionReceipt addIssuer(String account) {
        final Function function =
                new Function(
                        FUNC_ADDISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String addIssuer(String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddIssuer(String account) {
        final Function function =
                new Function(
                        FUNC_ADDISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddIssuerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDISSUER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt removeIssuer(String account) {
        final Function function =
                new Function(
                        FUNC_REMOVEISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String removeIssuer(String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REMOVEISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveIssuer(String account) {
        final Function function =
                new Function(
                        FUNC_REMOVEISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveIssuerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REMOVEISSUER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt updateTotalAssets(List<BigInteger> totalAssets) {
        final Function function =
                new Function(
                        FUNC_UPDATETOTALASSETS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256
                                                .class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                totalAssets,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.generated
                                                        .Uint256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String updateTotalAssets(List<BigInteger> totalAssets, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_UPDATETOTALASSETS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256
                                                .class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                totalAssets,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.generated
                                                        .Uint256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateTotalAssets(List<BigInteger> totalAssets) {
        final Function function =
                new Function(
                        FUNC_UPDATETOTALASSETS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256
                                                .class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                totalAssets,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.generated
                                                        .Uint256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getUpdateTotalAssetsInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_UPDATETOTALASSETS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint256>) results.get(0).getValue()));
    }

    public String ownerOf(BigInteger assetId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_OWNEROF,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt getTotalAssets() {
        final Function function =
                new Function(
                        FUNC_GETTOTALASSETS,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getTotalAssets(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GETTOTALASSETS,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetTotalAssets() {
        final Function function =
                new Function(
                        FUNC_GETTOTALASSETS,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getGetTotalAssetsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_GETTOTALASSETS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint256>) results.get(0).getValue()));
    }

    public Boolean suspended() throws ContractException {
        final Function function =
                new Function(
                        FUNC_SUSPENDED,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String infoOf(BigInteger assetId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_INFOOF,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean isIssuer(String account) throws ContractException {
        final Function function =
                new Function(
                        FUNC_ISISSUER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getValidAssets() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETVALIDASSETS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt updateInfo(List<String> info) {
        final Function function =
                new Function(
                        FUNC_UPDATEINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                info,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String updateInfo(List<String> info, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_UPDATEINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                info,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateInfo(List<String> info) {
        final Function function =
                new Function(
                        FUNC_UPDATEINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                info,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getUpdateInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_UPDATEINFO,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public String blackHole() throws ContractException {
        final Function function =
                new Function(
                        FUNC_BLACKHOLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String contractType() throws ContractException {
        final Function function =
                new Function(
                        FUNC_CONTRACTTYPE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt sendFrom(String from, String to, BigInteger assetId, byte[] data) {
        final Function function =
                new Function(
                        FUNC_SENDFROM,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(from),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(to),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String sendFrom(
            String from, String to, BigInteger assetId, byte[] data, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDFROM,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(from),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(to),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendFrom(
            String from, String to, BigInteger assetId, byte[] data) {
        final Function function =
                new Function(
                        FUNC_SENDFROM,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(from),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(to),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, byte[]> getSendFromInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDFROM,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (byte[]) results.get(3).getValue());
    }

    public TransactionReceipt unSuspend() {
        final Function function =
                new Function(
                        FUNC_UNSUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String unSuspend(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_UNSUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnSuspend() {
        final Function function =
                new Function(
                        FUNC_UNSUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public TransactionReceipt suspend() {
        final Function function =
                new Function(
                        FUNC_SUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String suspend(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSuspend() {
        final Function function =
                new Function(
                        FUNC_SUSPEND,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public TransactionReceipt issueAsset(String to, BigInteger assetId, byte[] data) {
        final Function function =
                new Function(
                        FUNC_ISSUEASSET,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(to),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String issueAsset(
            String to, BigInteger assetId, byte[] data, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ISSUEASSET,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(to),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIssueAsset(String to, BigInteger assetId, byte[] data) {
        final Function function =
                new Function(
                        FUNC_ISSUEASSET,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(to),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        assetId),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, byte[]> getIssueAssetInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ISSUEASSET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, byte[]>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (byte[]) results.get(2).getValue());
    }

    public BigInteger getHasAmount(String owner) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETHASAMOUNT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(owner)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<SendEventResponse> getSendEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(SEND_EVENT, transactionReceipt);
        ArrayList<SendEventResponse> responses = new ArrayList<SendEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SendEventResponse typedResponse = new SendEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.assetId =
                    (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<IssueEventResponse> getIssueEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ISSUE_EVENT, transactionReceipt);
        ArrayList<IssueEventResponse> responses =
                new ArrayList<IssueEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IssueEventResponse typedResponse = new IssueEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.assetId =
                    (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<SuspendedEventResponse> getSuspendedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(SUSPENDED_EVENT, transactionReceipt);
        ArrayList<SuspendedEventResponse> responses =
                new ArrayList<SuspendedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuspendedEventResponse typedResponse = new SuspendedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UnSuspendedEventResponse> getUnSuspendedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(UNSUSPENDED_EVENT, transactionReceipt);
        ArrayList<UnSuspendedEventResponse> responses =
                new ArrayList<UnSuspendedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnSuspendedEventResponse typedResponse = new UnSuspendedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<IssuerAddedEventResponse> getIssuerAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ISSUERADDED_EVENT, transactionReceipt);
        ArrayList<IssuerAddedEventResponse> responses =
                new ArrayList<IssuerAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IssuerAddedEventResponse typedResponse = new IssuerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<IssuerRemovedEventResponse> getIssuerRemovedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ISSUERREMOVED_EVENT, transactionReceipt);
        ArrayList<IssuerRemovedEventResponse> responses =
                new ArrayList<IssuerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IssuerRemovedEventResponse typedResponse = new IssuerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OneToMore load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new OneToMore(contractAddress, client, credential);
    }

    public static OneToMore deploy(
            Client client,
            CryptoKeyPair credential,
            String admin,
            List<BigInteger> totalAssets,
            List<String> info)
            throws ContractException {
        byte[] encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(admin),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256
                                                .class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                totalAssets,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.generated
                                                        .Uint256.class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                info,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))));
        return deploy(
                OneToMore.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                encodedConstructor,
                null);
    }

    public static class SendEventResponse {
        public TransactionReceipt.Logs log;

        public String operator;

        public String from;

        public String to;

        public BigInteger assetId;

        public byte[] data;
    }

    public static class IssueEventResponse {
        public TransactionReceipt.Logs log;

        public String to;

        public BigInteger assetId;

        public byte[] data;
    }

    public static class SuspendedEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class UnSuspendedEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class IssuerAddedEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class IssuerRemovedEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }
}
